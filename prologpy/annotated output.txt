(base) Eileens-mbp:Python-Prolog-Interpreter eileen$ python3 editor.py
query:  sibling ( mary, X ) 
query.arguments:  [mary, X]

NEW QUERY CALL  #function call 1
index:  0       rule:  sibling ( X, Y )  :- parent_child ( Z, X ) , parent_child ( Z, Y ) 
matching_head_var_bindings:  {X: mary, Y: X}
matched_tail_item:  <class 'prologpy.interpreter.Conjunction'> parent_child ( Z, mary ) , parent_child ( Z, X ) 

NEW QUERY CALL  #function call 2
index:  0       rule:  sibling ( X, Y )  :- parent_child ( Z, X ) , parent_child ( Z, Y ) 
matching_head_var_bindings:  None
index:  1       rule:  parent_child ( tom_smith, mary )  :- TRUE
matching_head_var_bindings:  {Z: tom_smith}
matched_tail_item:  <class 'prologpy.interpreter.TRUE'> TRUE
matching_item:  TRUE
to_yield:  parent_child ( tom_smith, mary ) 
END OF FOR-LOOP


NEW QUERY CALL  # function call 3
index:  0       rule:  sibling ( X, Y )  :- parent_child ( Z, X ) , parent_child ( Z, Y ) 
matching_head_var_bindings:  None
index:  1       rule:  parent_child ( tom_smith, mary )  :- TRUE    # choice point 1
matching_head_var_bindings:  {X: mary}
matched_tail_item:  <class 'prologpy.interpreter.TRUE'> TRUE
matching_item:  TRUE
to_yield:  parent_child ( tom_smith, mary ) 
END OF FOR-LOOP

matching_item:  parent_child ( tom_smith, mary ) , parent_child ( tom_smith, mary ) 
to_yield:  sibling ( mary, mary ) 
END OF FOR-LOOP

# choice point 2
index:  2       rule:  parent_child ( tom_smith, jack )  :- TRUE
matching_head_var_bindings:  {X: jack}
matched_tail_item:  <class 'prologpy.interpreter.TRUE'> TRUE
matching_item:  TRUE
to_yield:  parent_child ( tom_smith, jack ) 
END OF FOR-LOOP

matching_item:  parent_child ( tom_smith, mary ) , parent_child ( tom_smith, jack ) 
to_yield:  sibling ( mary, jack ) 
END OF FOR-LOOP

#function call 2 (cont)
index:  2       rule:  parent_child ( tom_smith, jack )  :- TRUE
matching_head_var_bindings:  None

#function call 1 (cont)
index:  1       rule:  parent_child ( tom_smith, mary )  :- TRUE
matching_head_var_bindings:  None
index:  2       rule:  parent_child ( tom_smith, jack )  :- TRUE
matching_head_var_bindings:  None
# return function call 1

# in the solver
matching_query_term:  sibling ( mary, mary ) 
solutions_map:  defaultdict(<class 'list'>, {'X': [mary]})
matching_query_term:  sibling ( mary, jack ) 
solutions_map:  defaultdict(<class 'list'>, {'X': [mary, jack]})
