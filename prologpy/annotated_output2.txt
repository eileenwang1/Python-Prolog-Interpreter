(base) Eileens-mbp:Python-Prolog-Interpreter eileen$ python3 editor.py
query:  sibling ( mary, X ) 
query.arguments:  [mary, X]
<query>
<forloop index="0" rule="sibling ( X, Y )  :- parent_child ( Z, X ) , parent_child ( Z, Y ) ">
matched_tail_item:  <class 'prologpy.interpreter.Conjunction'> parent_child ( Z, mary ) , parent_child ( Z, X ) 
<query>
<forloop index="0" rule="sibling ( X, Y )  :- parent_child ( Z, X ) , parent_child ( Z, Y ) ">
</forloop>
<forloop index="1" rule="parent_child ( tom_smith, mary )  :- TRUE">
matched_tail_item:  <class 'prologpy.interpreter.TRUE'> TRUE
matching_item:  TRUE
<yield output=parent_child ( tom_smith, mary )  matchinghead={Z: tom_smith}>
</yield>
<query>
<forloop index="0" rule="sibling ( X, Y )  :- parent_child ( Z, X ) , parent_child ( Z, Y ) ">
</forloop>
<forloop index="1" rule="parent_child ( tom_smith, mary )  :- TRUE">
matched_tail_item:  <class 'prologpy.interpreter.TRUE'> TRUE
matching_item:  TRUE
<yield output=parent_child ( tom_smith, mary )  matchinghead={X: mary}>
</yield>
matching_item:  parent_child ( tom_smith, mary ) , parent_child ( tom_smith, mary ) 
<yield output=sibling ( mary, mary )  matchinghead={X: mary, Y: X}>
</yield>
</forloop>
<forloop index="2" rule="parent_child ( tom_smith, jack )  :- TRUE">
matched_tail_item:  <class 'prologpy.interpreter.TRUE'> TRUE
matching_item:  TRUE
<yield output=parent_child ( tom_smith, jack )  matchinghead={X: jack}>
</yield>
matching_item:  parent_child ( tom_smith, mary ) , parent_child ( tom_smith, jack ) 
<yield output=sibling ( mary, jack )  matchinghead={X: mary, Y: X}>
</yield>
</forloop>
</query>
</forloop>
<forloop index="2" rule="parent_child ( tom_smith, jack )  :- TRUE">
</forloop>
</query>
</forloop>
<forloop index="1" rule="parent_child ( tom_smith, mary )  :- TRUE">
</forloop>
<forloop index="2" rule="parent_child ( tom_smith, jack )  :- TRUE">
</forloop>
</query>
matching_query_term:  sibling ( mary, mary ) 
solutions_map:  defaultdict(<class 'list'>, {'X': [mary]})
matching_query_term:  sibling ( mary, jack ) 
solutions_map:  defaultdict(<class 'list'>, {'X': [mary, jack]})
